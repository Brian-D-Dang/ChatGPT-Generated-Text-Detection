I'll give a very simplified example. Let's say that you want to have a file that says:{3 11 9}. First, you split that into three files. And remember that computers operate in binary, so each of those numbers is converted to their binary equivalent: File 1: 0011 File 2: 1011 File 3: 1001 Note: all we're doing here is making each file hold one of the three numbers above. In binary, 0011 three, 1011 eleven, and 1001 nine. Finally, you generate something called a "parity bit" for each bit in the existing files. What you do is take all of the digits in the same position, and determine if there are an even or odd number of 1's. Your goal here is to create a fourth file (your.par file) that, when matched with your existing files, makes it so that there are always an even number of 1's in each position. The evenness or oddness of a number is called its "parity." So if you look at the first number (starting on the left), you have one 0 and two 1's. That's an even number of 1's, so the first digit in your par file will be 0. If you look at the next digit, you have all 0's, so one again, the second digit of the parity file will be 0. The third digit has two 1's and a 0, so the third digit of the parity file will be 0. The fourth and final digit has three 1's across your three file, so you have to make the fourth digit of the parity file 1 as well, so that you have an even number of 1s in the final set of files. So now you have a new file to add to your set: File 1: 0011 File 2: 1011 File 3: 1001 Par file: 0001 Notice that you have an even number of 1's in each column. So now, if you somehow lose a file, you can reconstruct it, because you know that each digit has to keep the total number of 1's in each column even.