Consider the task of performing a sequence of searches in a binary search tree. After each search, an algorithm is allowed to arbitrarily restructure the tree, at a cost proportional to the amount of restructuring performed. The cost of an execution is the sum of the time spent searching and the time spent optimizing those searches with restructuring operations. This notion was introduced by Sleator and Tarjan in (JACM, 1985), along with an algorithm and a conjecture. The algorithm, Splay, is an elegant procedure for performing adjustments while moving searched items to the top of the tree. The conjecture, called dynamic optimality, is that the cost of splaying is always within a constant factor of the optimal algorithm for performing searches. The conjecture stands to this day. In this work, we attempt to lay the foundations for a proof of the dynamic optimality conjecture. Central to our methods are simulation embeddings and approximate monotonicity. A simulation embedding maps each execution to a list of keys that induces a target algorithm to simulate the execution. Approximately monotone algorithms are those whose cost does not increase by more than a constant factor when keys are removed from the list. As we shall see, approximately monotone algorithms with simulation embeddings are dynamically optimal. Building on these ideas: item 1st item We construct a simulation embedding for Splay by inducing Splay to perform arbitrary subtree transformations. Thus, if Splay is approximately monotone then it is dynamically optimal. We also show that approximate monotonicity is a necessary condition for dynamic optimality. (Section) item 2nd item We show that if Splay is dynamically optimal, then with respect to optimal cost, its additive overhead is at most linear in the sum of initial tree size and the number of requests. (Section) item 3rd item We prove that a known lower bound on optimal execution cost by Wilber is approximately monotone. (Section and Appendix) item 4th item We speculate about how one might establish dynamic optimality by adapting the proof of approximate monotonicity from the lower bound to Splay. (Section) item 5th item We demonstrate that two related conjectures, traversal and deque, also follow if Splay is approximately monotone, and that many results in this paper extend to a broad class of "path-based" algorithms. (Section) Appendix generalizes the tree transformations used to build simulation embeddings, and Appendix includes proofs of selected pieces of "folklore" that have appeared throughout the literature.