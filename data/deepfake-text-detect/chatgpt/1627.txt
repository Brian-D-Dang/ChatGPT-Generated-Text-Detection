We've all heard the saying that a Jack of All Trades is a Master of None. I'm not here to say that this is completely true and that if you 're a great programmer, designer or artist then your knowledge in any other field will somehow hurt your career. However, there are ways around 'the curse', so let's look at an example from my own experience - though probably anyone could apply it to themselves! A friend was talking about his latest project which he would be working on for two months as part of his job role (and keeping within budget) but after those two weeks he wouldn't have much free time left unless they were able to take over another team member who had been asked to move onto something else. He also mentioned that during these two months he'd need help with design work because some clients wanted them done by someone experienced while others just needed basic designs. As far as I knew, being well versed across multiple roles wasn't necessarily a good thing either; having only come into computer programming as a hobby, although possessing both skillsets, I didn't see how what should have been a simple task like creating interfaces between different components turned out to be more difficult than writing code itself. To make matters even worse, when he suggested that we get together to brainstorm ideas together rather than him spending hours every day staring at a blank screen thinking up new featuresgraphics etc., yet again I saw no difference between me doing exactly the same thing whether it was dealing with a client or designing a website myself... Working as a freelance developer has taught me many things. My biggest lesson, however, comes from observing how successful businesses and projects operate: particularly large companies. It always seems obvious once you think about why certain processes must exist - such as procurement departments needing to know exactly where their next stock of products will arrive each month regardless of demand, keepsakes kept safe until valentine's day need to be stored away immediately and so on. The problem arises when people start trying to force in pointless innovation or unnecessary changes based solely off circumstance instead of necessity alone. If anything happens unexpectedly, or needs to change due to unforeseen circumstances, then hopefully whoever made the decision can adapt accordingly without causing disruption or wasting valuable resources unnecessarily. But it quickly becomes clear very early on that everyone involved doesn't actually care about the company environment between colleagues individually, but the bottom line results. And inevitably, individual efforts become diluted as everything gets re-routed through committees and meetings before ultimately coming back down to 'that meeting...'. If developers don't get paid enough, then simply hiring external freelancers isn't going to solve the real issues affecting the industry; namely poor development practices, low employee morale and lack of supervision. It might seem harsh to blame individuals entirely responsible for developing software but, sadly, sometimes there really aren't solutions available unless the whole system is overhauled first!