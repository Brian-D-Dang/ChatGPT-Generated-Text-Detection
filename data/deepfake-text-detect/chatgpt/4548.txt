Edit: I think I may have overestimated the problem, due in part to my sources, and in part to my zealousness. Many comments so far have pointed out that even with a perfect implementation of Dijkstra's algorithm (which is possible) there will be backtracking issues when reaching an edge which has not been properly placed yet - this can't really be solved by using more threads as it simply means you'll need more cpu power for each thread (and since most computers are multicore these days, the extra cores won't really help). This could account for some slowdowns on older hardware or operating systems without compromising the correctness of the solution. The other thing I've missed so far is how the "caching" process works specifically in your case. If you fail to place a vertex successfully, then its parent will no longer exist - if you attempt to use that information later it may well lead to the same situation again. In order to avoid this kind of issue you must refresh all data associated with the parents - including their keys themselves once they're used. It seems to me like this would cause massive memory usage unless you somehow track what vertices have already been cached (or at least keep them around until you actually cache them yourself), but maybe this depends on whether or not you also preprocess the graph before running Dijkstra?