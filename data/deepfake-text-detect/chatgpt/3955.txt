Edit: I think I may have overestimated the problem, due in part to my sources, and in part to my zealousness. Many comments so far have pointed out that even if this was not a system bug, it is still a design flaw - which is exactly what we all expected. However, when the entire company seems to be working on a new version of Windows Phone 7, we were foolish to put our hopes so high for an OS upgrade. The thing with "official" software updates is this; they don't happen fast enough. Microsoft can't afford to take its time fixing bugs or getting things right, as much as it would like to do otherwise. They need to make sure the hardware and operating systems are ready for whatever new features are added down the road. It has been six months since KitKat came out (Android 4.2) and people have gotten used to it being slow, buggy, etc... not only will users expect the same from the next update, but companies are looking forward to it too because of their own marketing campaigns. So why is there such a big deal about WP7? Well, while Android and iOS often receive two major OS versions every year, most other platforms get one or sometimes none at all. And many of us, myself included, want more than just a single update during our lifetimes! We're a technology-obsessed generation who demand newer and better products faster than any demographic ever before. That's where the bigger issue lies here. The reality is that most other platforms see no reason to wait until the last minute to add additional features. Plus, they already know how well the product works; they probably won't change anything unless it actually breaks something important. This means that many developers focus their resources on making the best possible experience rather than having to worry about updating outdated codebases. This brings me to the biggest problem now facing WP7. To handle increased consumer expectations, Microsoft had to develop an OS that could keep up with them. With C and the.NET Framework behind it, it should be able to achieve a good balance between overall performance and security. But once again, this is proving to be extremely difficult given the amount of pressure Microsoft faces these days. For example, the current release of.Net 1.0.1 isn't quite finished yet, and Microsoft used to talk about a more stable build by Spring 2012. Is this really realistic anymore? Do you seriously believe that Microsoft needs Spring 2012 ready to go in October 2011? If Microsoft does decide to push back the release dates of future releases, it will likely cause an uproar among the community. Not only will this upset consumers and programmers alike, but it also puts Microsoft in bad light as a responsible developer. That said, let's look at the positive side of this situation. One of the biggest problems with previous generations of mobile devices was the fact that older phones and tablets couldn't run modern apps. The main reason being that the mobile processor wasn't powerful enough. While doing away with that restriction was a smart move from a business standpoint, that didn't sit well with many customers. Luckily, the upcoming Windows 8 platform promises better technology for Android and iOS. Windows Phone 7, therefore, is going to suffer less from this problem. By switching to ARM processors instead of x86 ones, many hardware manufacturers are finally starting to offer updated phones equipped with Mali GPUs and Qualcomm chipsets. These technologies aren't compatible with old handsets, but they are designed to help OSes perform better regardless of whether they are running the latest app. Perhaps that's why Nokia decided to drop support for Symbian after a few years. In addition to these improvements, the upcoming Windows 8 Operating System will bring a number of new features that will benefit both phone makers and end-users alike. All together then, the two issues above present some interesting challenges for Microsoft. Will it truly improve its development process to produce timely, quality software? Or will it continue to rely solely on Microsoft programming frameworks and antiquated coding techniques? Either way, the prospects are mixed.